// <auto-generated />
using System;
using FileToEmailLinker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileToEmailLinker.Migrations
{
    [DbContext(typeof(FileToEmailLinkerContext))]
    [Migration("20240413135121_AlertEntityAdded")]
    partial class AlertEntityAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlertSeverity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("References")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visualized")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.FileRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FileRef");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.FixedDatesSchedulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatesList")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MailingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MailingPlanId");

                    b.ToTable("FixedDatesSchedulation");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.MailingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileStringList")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MailingPlan");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.MonthlySchedulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("April")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("August")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("December")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Eight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Eighteen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Eleven")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("February")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Fifteen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Five")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Four")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Fourteen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("January")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("July")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("June")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MailingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("March")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("May")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Nine")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Nineteen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("November")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("October")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("One")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("September")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Seven")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Seventeen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Six")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sixteen")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ten")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Thirteen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Thirty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Thirtyone")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Three")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Twelve")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twenty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentyeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentyfive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentyfour")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentynine")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentyone")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentyseven")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentysix")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentythree")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Twentytwo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Two")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MailingPlanId")
                        .IsUnique();

                    b.ToTable("MonthlySchedulation");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.Receiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Receiver");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.WeeklySchedulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Friday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MailingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Monday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Saturday")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sunday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Thursday")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MailingPlanId")
                        .IsUnique();

                    b.ToTable("WeeklySchedulation");
                });

            modelBuilder.Entity("MailingPlanReceiver", b =>
                {
                    b.Property<int>("MailingPlanListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiverListId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MailingPlanListId", "ReceiverListId");

                    b.HasIndex("ReceiverListId");

                    b.ToTable("MailingPlanReceiver");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.FixedDatesSchedulation", b =>
                {
                    b.HasOne("FileToEmailLinker.Models.Entities.MailingPlan", "MailingPlan")
                        .WithMany()
                        .HasForeignKey("MailingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailingPlan");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.MonthlySchedulation", b =>
                {
                    b.HasOne("FileToEmailLinker.Models.Entities.MailingPlan", "MailingPlan")
                        .WithOne("MonthlySchedulation")
                        .HasForeignKey("FileToEmailLinker.Models.Entities.MonthlySchedulation", "MailingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailingPlan");
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.WeeklySchedulation", b =>
                {
                    b.HasOne("FileToEmailLinker.Models.Entities.MailingPlan", "MailingPlan")
                        .WithOne("WeeklySchedulation")
                        .HasForeignKey("FileToEmailLinker.Models.Entities.WeeklySchedulation", "MailingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailingPlan");
                });

            modelBuilder.Entity("MailingPlanReceiver", b =>
                {
                    b.HasOne("FileToEmailLinker.Models.Entities.MailingPlan", null)
                        .WithMany()
                        .HasForeignKey("MailingPlanListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileToEmailLinker.Models.Entities.Receiver", null)
                        .WithMany()
                        .HasForeignKey("ReceiverListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileToEmailLinker.Models.Entities.MailingPlan", b =>
                {
                    b.Navigation("MonthlySchedulation");

                    b.Navigation("WeeklySchedulation");
                });
#pragma warning restore 612, 618
        }
    }
}
